{"version":3,"sources":["components/Tweet.js","components/Tweets.js","components/TweetsApp.js","App.js","serviceWorker.js","index.js"],"names":["TweetClass","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","item","console","log","react_default","a","createElement","index_es","tweetId","id_str","Component","_","require","override","css","_templateObject","Tweets","userId","tweets","loading","getTweets","_this2","socket","io","process","REACT_APP_BACKEND_API","query","on","data","new_tweets","concat","new_tweets_unq","uniq","sortBy","o","Date","created_at","setState","reverse","removeAllListeners","tweetItems","map","tweet","i","Tweet","key","className","react_spinners","sizeUnit","size","color","TweetsApp","components_Tweets","firebase","initializeApp","apiKey","authDomain","projectId","App","isSignedIn","userID","uiConfig","signInFlow","signInOptions","auth","TwitterAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","componentDidMount","onAuthStateChanged","user","providerData","uid","onClick","signOut","currentUser","displayName","alt","src","photoURL","StyledFirebaseAuth_default","firebaseAuth","components_TweetsApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47d55de8.chunk.js","sourcesContent":["import React, {Component}  from 'react';\nimport {TwitterTweetEmbed} from 'react-twitter-embed';\n\n\n// const tweetData = {\n//     id_str: '1058010455640363009',\n//     user: {\n//         name: 'R',\n//         screen_name: 'rprabha',\n//         profile_image_url:\n//         'http://pbs.twimg.com/profile_images/1218664259/IMG_2410_normal.JPG',\n//     },\n//     text:\n//    'RT @rasbt: Just learned that there\\'s a sklearn_porter package -- a tool to \"transpile trained scikit-learn estimators to C, Java, JavaScripâ€¦',\n  \n//     created_at: 'Thu Nov 01 14:58:44 +0000 2018',\n//     favorite_count: 0,\n//     retweet_count: 10,\n//     entities: {\n//         urls: [],\n//         user_mentions: [],\n//         hashtags: [],\n//         symbols: []\n//       } \n//   };\n\nclass TweetClass extends Component {\n    constructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\titem : props.item\n        }\n        console.log(props.item);\n\t}\n    render(){\n\n        const linkProps = {target: '_blank', rel: 'noreferrer'}\n        return (  \n            <div>\n                {/* <Tweet data={this.state.item} linkProps={linkProps} /> */}\n                <TwitterTweetEmbed\n                    tweetId={this.state.item.id_str}\n                />\n            </div>\n            \n        )\n    }\n\n}\n\n\n\nexport default TweetClass;\n","import React, {Component}  from 'react';\nimport io from \"socket.io-client\";\nimport Tweet from './Tweet';\nimport { css } from 'react-emotion';\nimport { CircleLoader } from 'react-spinners';\nvar _ = require('underscore');\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\n\nclass Tweets extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            userId : props.userId,\n            tweets : [],\n            loading: true\n        }\n    }\n    componentDidMount(){\n\t\tthis.getTweets();\n\t}\n    getTweets(){\n        \n        const socket = io(process.env.REACT_APP_BACKEND_API, {query:\"userId=\"+this.state.userId});\n\n        socket.on('connect', () => {\n            console.log(\"Socket Connected\");\n            socket.on(\"tweets\", data => {\n                let new_tweets = [data].concat(this.state.tweets);\n                var new_tweets_unq = _.uniq(new_tweets, 'id_str')\n\n                //sorting by created_at for better rendering\n                new_tweets_unq = _.sortBy(new_tweets_unq, function(o) { return new Date(o.created_at); })\n                this.setState({ tweets: new_tweets_unq.reverse() , loading :false});\n            });\n        });\n        socket.on('disconnect', () => {\n            socket.removeAllListeners(\"tweets\");\n            console.log(\"Socket Disconnected\");\n        });\n\n        \n\t} \n    render(){\n        const tweetItems = this.state.tweets.map((tweet, i) => {\n\t\t\treturn (\n\t\t\t\t<Tweet item={tweet} key= {tweet.id_str}/>\n\t\t\t)\n\t\t})\n        const linkProps = {target: '_blank', rel: 'noreferrer'}\n        return (  \n            \n            <div>\n                <div className='sweet-loading'>\n                    <CircleLoader\n                    className={override}\n                    sizeUnit={\"px\"}\n                    size={50}\n                    color={'#123abc'}\n                    loading={this.state.loading}\n                    />\n                </div> \n                <ul className=\"collection\">\n                    {tweetItems}\n                </ul>\n\t\t\t</div>\n        )\n    }\n\n}\n\n\n\nexport default Tweets;\n\n\n","import React, {Component}  from 'react';\nimport Tweets from './Tweets.js'\n\n\n\nclass TweetsApp extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            userId : props.userId\n        }\n    }\n    \n    render(){\n        return(  \n            <div>\n                <h3>Tweets List</h3>\n                <Tweets userId={this.state.userId}></Tweets>\n            </div>\n\n        )\n    }\n\n}\n\n\n\nexport default TweetsApp;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from 'firebase';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport TweetsApp from './components/TweetsApp';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC3RDSnOVpeWaH9LKey9hr3E1_5inGp-7s\",\n  authDomain: \"twit-task.firebaseapp.com\",\n  projectId: \"twit-task\",\n})\n\nclass App extends Component {\n  state = { isSignedIn: false , userID :''}\n  uiConfig = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.TwitterAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccessWithAuthResult: () => false\n    }\n  }\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      \n      this.setState({ isSignedIn: !!user });\n      if(user)\n      this.setState({ userID : user.providerData[0].uid });\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n      <nav className=\"navbar navbar-light bg-light\">\n        <span className=\"navbar-brand mb-0 h1\">Twitter-Task</span>\n\n        <div >\n        {this.state.isSignedIn ? (\n          <span>\n            <div>Signed In!</div>\n            <button onClick={() => firebase.auth().signOut()}>Sign out!</button>\n            <h1>Welcome {firebase.auth().currentUser.displayName}</h1>\n            <img\n              alt=\"profile picture\"\n              src={firebase.auth().currentUser.photoURL}\n            />\n          </span>\n        ) : (\n          <StyledFirebaseAuth\n            uiConfig={this.uiConfig}\n            firebaseAuth={firebase.auth()}\n          />\n        )}\n        </div>\n        \n      </nav>\n\n      <div className=\"container\">\n\n           {this.state.isSignedIn ? (\n             <TweetsApp userId={this.state.userID}/>\n           ) : (\n            <div>\n                <h3>Please signIn to see twitter stream!</h3>\n            </div>\n           )}\n\n          \n      </div>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}